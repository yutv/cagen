#!/bin/bash

VERSION='1.0.0'

printUsage()
{
    local SCRIPT_NAME=$(basename $0)
    echo "${SCRIPT_NAME} ${VERSION}"
    echo "Usage: ${SCRIPT_NAME} [OPTIONS] domain"
    echo "Options:"
    echo "    -h      | --help           display this message and exit"
    echo "    -f      | --force          force owerwrite existing files"
    echo
    echo "Example:"
    echo "    ${SCRIPT_NAME} dev.local"
    echo
}

uncomment()
{
	sed -e 's/#.*$//' -re 's/^[\t ]+//' -e '/^$/d' -e 's/\[/\n&/g' 
}

dirname()
{
	sed 's/\(.*\)\/.*/\1/'
}

domain()
{
	sed "s~{DOMAIN}~$domain~g"
}

if [ $# -eq 0 ]
then
    printUsage
    exit 0;
fi
force=""
verbose=""
POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
        -f|--force)
            force="1"
            shift
            ;;
        -v|--verbose)
            verbose="1"
            shift
            ;;
        -h|--help)
            printUsage
            exit 0
            ;;
        *)
            POSITIONAL+=("$1")
            shift
            ;;
    esac
done
set -- "${POSITIONAL[@]}"

scriptDir=$(readlink -f $0 | dirname)
cd "$scriptDir" || exit 1
mkdir -p "$scriptDir/certs"
cd "$scriptDir/certs" || exit 1

domain="$1"

if [ ! -z "$force" ]; then
	rm -f $domain*.*
fi

if [ -f "$domain-ca.key" ]; then
	echo "Error: $domain-ca.key already exists"
	exit 1
fi

#cat /etc/pki/tls/openssl.cnf | uncomment > $domain.cnf

cat "$scriptDir/cagen.cnf.dist" | domain > $domain.cnf
passphrase="1234"
openssl genrsa -aes256 -passout pass:$passphrase -out $domain-ca.key 2048 > /dev/null 2>&1
chmod 600 $domain-ca.key
openssl req -passin pass:$passphrase -new -x509 -subj "/CN=$domain" -extensions v3_ca -days 3650 -key $domain-ca.key -sha256 -out $domain-ca.crt -config $domain.cnf  > /dev/null 2>&1
openssl genrsa -passout pass:$passphrase -out $domain.key 2048  > /dev/null 2>&1
openssl req -subj "/CN=$domain" -extensions v3_req -sha256 -new -key $domain.key -out $domain.csr  > /dev/null 2>&1
openssl x509 -req -passin pass:$passphrase -extensions v3_req -days 3650 -sha256 -in $domain.csr -CA $domain-ca.crt -CAkey $domain-ca.key -CAcreateserial -out $domain.crt -extfile $domain.cnf  > /dev/null 2>&1

if [ ! -z "$verbose" ]; then
	openssl x509 -in $domain.crt -text -noout
fi
echo
echo "Generated Files:"
echo "  certs/$domain.key    - SSL Certificate Private Key"
echo "  certs/$domain.crt    - SSL Certificate Public Key"
echo "  certs/$domain-ca.crt - Authority Certificate (import it in your browser as Authority Certificate)"
# echo "certs/$domain.cnf    "
# echo "certs/$domain.csr    "
# echo "certs/$domain-ca.srl "
# echo "certs/$domain-ca.key "
echo
echo "Apache Config Example:"
echo "    SSLEngine on"
echo "    SSLCertificateFile /etc/ssl/certs/$domain.crt"
echo "    SSLCertificateKeyFile /etc/ssl/private/$domain.key"
echo
echo "Nginx Config Example:"
echo "    server {"
echo "        server_name $domain;"
echo "        listen 80;"
echo "        listen 443 ssl;"
echo "        ssl_certificate /etc/ssl/certs/$domain.crt;"
echo "        ssl_certificate_key /etc/ssl/private/$domain.key;"
echo
echo "Ubuntu (curl, etc.)"
echo "    sudo cp certs/$domain-ca.crt /usr/local/share/ca-certificates/"
echo "    sudo update-ca-certificates"
echo
